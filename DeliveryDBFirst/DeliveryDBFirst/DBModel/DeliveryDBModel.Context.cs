//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeliveryDBFirst.DBModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DeliveryDBEntities : DbContext
    {
        public DeliveryDBEntities()
            : base("name=DeliveryDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Couriers> Couriers { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<OrderStatuses> OrderStatuses { get; set; }
    
        public virtual ObjectResult<stp_OrderByStatusID_Result> stp_OrderByStatusID(Nullable<int> statusID)
        {
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_OrderByStatusID_Result>("stp_OrderByStatusID", statusIDParameter);
        }
    
        public virtual int stp_OrderInsert(string addressTo, string descriptionOfCargo, Nullable<System.DateTime> orderDate, Nullable<double> price, Nullable<int> courierID, Nullable<int> statusID, ObjectParameter orderID)
        {
            var addressToParameter = addressTo != null ?
                new ObjectParameter("AddressTo", addressTo) :
                new ObjectParameter("AddressTo", typeof(string));
    
            var descriptionOfCargoParameter = descriptionOfCargo != null ?
                new ObjectParameter("DescriptionOfCargo", descriptionOfCargo) :
                new ObjectParameter("DescriptionOfCargo", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var courierIDParameter = courierID.HasValue ?
                new ObjectParameter("CourierID", courierID) :
                new ObjectParameter("CourierID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_OrderInsert", addressToParameter, descriptionOfCargoParameter, orderDateParameter, priceParameter, courierIDParameter, statusIDParameter, orderID);
        }
    }
}
